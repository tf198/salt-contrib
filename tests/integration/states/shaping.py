import integration, os.path, shutil
from saltunittest import destructiveTest, skipIf

SCRIPT_FILE = os.path.join(integration.TMP, 'tc_script_eth0')

class ShapingStateTest(integration.ModuleCase, integration.SaltReturnAssertsMixIn):
    
    def tearDown(self):
        if os.path.exists(SCRIPT_FILE):
            os.unlink(SCRIPT_FILE)
    
    def _install_script(self):
        shutil.copyfile(os.path.join(integration.FILES, 'tc_script_eth0'), SCRIPT_FILE)
    
    def test_create(self):
        ret = self.run_state('shaping.qdisc', name='eth0', type='prio', script=SCRIPT_FILE, apply=False)
        self.assertSaltTrueReturn(ret)
        self.assertSaltStateChangesEqual(ret, {'shaping': 'Created shaping script.'})
        self.assertSaltCommentRegexpMatches(ret, 'Skipping apply tc script <enabled=True>.')
        
        self.assertTrue(os.path.exists(SCRIPT_FILE))
        self.assertMultiLineEqual(open(SCRIPT_FILE, 'r').read(), '''
#!/bin/bash
set -e

## AUTOGENERATED TC FOR eth0 - DO NOT EDIT ##
tc qdisc del dev eth0 root || true
tc qdisc add dev eth0 root handle 1: prio
'''.lstrip())
        
    def test_no_action(self):
        self._install_script()
        
        ret = self.run_state('shaping.qdisc', name='eth0', type='prio', script=SCRIPT_FILE, apply=False)
        self.assertSaltTrueReturn(ret)
        self.assertSaltCommentRegexpMatches(ret, 'Shaping for interface eth0 is up to date.')
        self.assertSaltStateChangesEqual(ret, {})
        
    def test_update_required(self):
        self._install_script()
        
        ret = self.run_state('shaping.qdisc', name='eth0', type='tbf', script=SCRIPT_FILE, apply=False)
        self.assertSaltTrueReturn(ret)
        self.assertSaltCommentRegexpMatches(ret, 'Skipping apply tc script <enabled=True>')
